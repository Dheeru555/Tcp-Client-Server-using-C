#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <signal.h>
int main(int argc, char *argv[])
{
int simpleSocket = 0;
int simplePort = 0;
int returnStatus = 0;
char buffer[2000] = "";
char cmd[100];
const char MESSAGE1[] = "This is a Test String from client side!\n";
char ch='c';
char lv;
struct sockaddr_in simpleServer;
if (argc != 3)
{
fprintf(stderr, "Usage: %s <server> <port>\n", argv[0]);
exit(1);
}

simpleSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
if (simpleSocket == -1)
{
fprintf(stderr, "Could not create a socket!\n");
exit(1);
}
else
{
fprintf(stderr, "Socket created!\n");
}
simplePort=atoi(argv[2]);
bzero(&simpleServer, sizeof(simpleServer));
simpleServer.sin_family = AF_INET;
inet_addr(argv[1], &simpleServer.sin_addr.s_addr);
simpleServer.sin_port = htons(simplePort);


returnStatus = connect(simpleSocket, (struct sockaddr *) &simpleServer,
sizeof(simpleServer));

if (returnStatus == 0)
{
fprintf(stderr, "Connect successful!\n");
}
else
{
fprintf(stderr, "Could not connect to address!\n");
close(simpleSocket);
exit(1);
}

void cleanExit(){exit(0);}

while(ch!='q')
{
   printf("Dheeraj--> ");
   printf("Enter the executable commands with only spaces delimited: ");
   scanf("%[^\n]s",cmd);
   printf("Entered the executable commands %s: ",cmd);

returnStatus = send(simpleSocket, cmd, strlen(cmd)+1,0);
if (returnStatus == -1)
{
fprintf(stderr, "Could not send confirmation!\n");
}
else {
printf("Confirmation sent\n");
}

returnStatus = read(simpleSocket, buffer, sizeof(buffer));
if ( returnStatus > 0 )
{
printf("%d: %s", returnStatus, buffer);
}
else
{
fprintf(stderr, "Return Status = %d \n", returnStatus);
}

printf("Enter q to quit or enter any other letter to continue");
        scanf(" %c",&ch);

        lv=getchar();
}


signal(SIGTERM, cleanExit);
signal(SIGINT, cleanExit);


close(simpleSocket);
return 0;
}
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <signal.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <string.h>
# define MAXBUF 300

const char MESSAGE[] = "This is a Test String!\n";
int main(int argc, char *argv[])
 {
int simpleSocket = 0;
int simplePort = 0;
int returnStatus = 0;
struct sockaddr_in simpleServer;
char buffer1[MAXBUF];
char ch='c';
int pidd;


if (argc != 2)
{
fprintf(stderr, "Usage: %s <port>\n", argv[0]);
exit(1);
}
simpleSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
if (simpleSocket == -1)
{
fprintf(stderr, "Could not create a socket!\n");
exit(1);
} else
{
fprintf(stderr, "Socket created!\n");
}

simplePort = atoi(argv[1]);


bzero(&simpleServer, sizeof(simpleServer));
simpleServer.sin_family = AF_INET;

simpleServer.sin_addr.s_addr = htonl(INADDR_ANY);
simpleServer.sin_port = htons(simplePort);

void cleanExit(){exit(0);}


returnStatus = bind(simpleSocket, (struct sockaddr *)&simpleServer,sizeof(simpleServer));
if (returnStatus == 0)
{
fprintf(stderr, "Bind completed!\n");
}
else {
fprintf(stderr, "Could not bind to address!\n");
close(simpleSocket);
exit(1);

}

returnStatus = listen(simpleSocket, 5);
if (returnStatus == -1)
{
fprintf(stderr, "Cannot listen on socket!\n");
close(simpleSocket);
exit(1);
}
while (1)
{
struct sockaddr_in clientName = { 0 };
int simpleChildSocket = 0;
int clientNameLength = sizeof(clientName);
simpleChildSocket = accept(simpleSocket,(struct sockaddr *) &clientName,&clientNameLength);
if (simpleChildSocket == -1)
{
fprintf(stderr, "Cannot accept connections!\n");
close(simpleSocket);
exit(1);
}

pidd=fork();
//if(pidd < 0)
//error("Error on fork");

if(pidd == 0)
{

//close(simpleSocket);

while(1)
{

int i=0,k=0,temp=0,j=0,l=0,f=0,z=0,u=0,no=0,imp=0;
   int notable[10];
   const char s[2] = " ";
   char *token;
  char *notes[25];
  char *first[10][10];

int   fd[2];
  pid_t pid;
  int   tk_in = 0;


returnStatus = recv(simpleChildSocket, buffer1, MAXBUF, 0);
if ( returnStatus > 0 )
{

printf("Commands Receieved from client side are\n");
puts(buffer1);
}
else
{
fprintf(stderr, "Return Status = %d \n", returnStatus);
}

if ( returnStatus == 0 )
break;

token = strtok(buffer1, s);

   /* Split the given commands using space delimited*/
   while( token != NULL )
   {
   notes[i]=(char *)malloc(strlen(token)*sizeof(char));
      strcpy(notes[i],token);
       token = strtok(NULL, s);
     i++;
     }


     notes[i]='\0';
     if(notes[i]!='\0')
     printf("values %d\n",i);

/* Split the given commands into individual cmd groups by using pipe and null as delimiter*/

       for(j=0;j<=i;j++)
     {


          if(notes[j]=='\0')
         {
                first[k][l]=(char *)malloc(1*sizeof(char));
            strcpy(first[k][l],"\0");
            //first[k][l]='\0';
             temp=1;
             notable[no]=l;
             no++;
         }
          else if((strcmp(notes[j],"|") == 0))
         {
                first[k][l]=(char *)malloc(1*sizeof(char));
            strcpy(first[k][l],"\0");
            //first[k][l]="\0";
             temp=1;
             notable[no]=l;
             no++;
         }
         else
         {
            first[k][l]=(char *)malloc(strlen(notes[j])*sizeof(char));
            strcpy(first[k][l],notes[j]);
         }

//         puts(first[k][l]);
         l++;


         if(temp == 1)
         {
             k++;
             l=0;
             temp=0;
         }
     }

/*To add null char at the each end of array group*/

 for(u=0;u<k;u++)
 {
        first[u][notable[u]]='\0';
 }

/*Fork implementation starts here by storing input into one variable tk_in*/

 while (imp<k)
    {
      pipe(fd);
      if ((pid = fork()) == -1)
        {

        exit(1);
}
      else if (pid == 0)
        {
          dup2(tk_in, 0);

          if (imp!=k-1)
            dup2(fd[1], 1);
          close(fd[0]);
if (imp==k-1)
dup2(simpleChildSocket,1);
 execvp(first[imp][0],first[imp]);
         // exit(1);
        }
      else
        {
          wait(NULL);
          close(fd[1]);
          tk_in = fd[0];
          imp++;
        }
    }

/*Freeing the spaces allocated*/

for(f=0;f<=i;f++)
        free(notes[f]);

for(z=0;z<k;z++)
        {
        for(j=0;j<l;j++)
        {
        free(first[z][j]);
        }
        }

//write(simpleChildSocket, MESSAGE, strlen(MESSAGE));
}
}

else
close(simpleChildSocket);

}

//signal(SIGTERM, cleanExit);
//signal(SIGINT, cleanExit);

return 0;


}
